{
	"info": {
		"_postman_id": "47b7f52f-5c56-4364-abc7-2aa72a2215b6",
		"name": "reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45967406"
	},
	"item": [
		{
			"name": "user-crud",
			"item": [
				{
					"name": "get-single-user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// let's make some checks on api response\r",
									"\r",
									"pm.test('Check response is 200', function(){\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"// retrieve response body and print in console for debug\r",
									"var res = pm.response.json();\r",
									"console.log(res);\r",
									"\r",
									"// retrieve user id and email from body and print in console for debug\r",
									"var id = res.data.id;\r",
									"var email = res.data.email;\r",
									"console.log(id, email);\r",
									"\r",
									"// check expected user id\r",
									"pm.test('Check user id and email', function(){\r",
									"    pm.expect(id).to.eq(2);\r",
									"    pm.expect(email).to.eq(\"janet.weaver@reqres.in\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// code to check is 201 that means entry was created \r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//check my brand new user\r",
									"pm.test(\"User was created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    // check data data actually corresponds to request body\r",
									"    pm.expect(jsonData.name).to.eql(data.name);\r",
									"    pm.expect(jsonData.job).to.eql(data.job);\r",
									"    // check that the user has been created with an id (variable actually exhists)\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// save created user id as environment variable\r",
									"// so it can be reused in future requests\r",
									"let json = pm.response.json();\r",
									"pm.environment.set(\"created_user_id\", json.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve-new-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// code to check is 200 (200 means OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User was updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(data.name);\r",
									"    pm.expect(jsonData.name).to.not.eql(\"wrong name\")\r",
									"    pm.expect(jsonData.job).to.eql(data.job);\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"This is just a volountary failed test\", function () {\r",
									"    pm.expect.response.to.have.property(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// code to check is 204 (204 means no content)\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// check that it actually has no content even though response cod is 204\r",
									"pm.test(\"No content in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user-auth",
			"item": [
				{
					"name": "register-user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status check\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"save registered user id in environment variable\", function() {\r",
									"    var response = pm.response.json();\r",
									"    pm.environment.set(\"registered_user_id\", response.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status check\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// save token in environment for future authentication needs\r",
									"pm.test(\"save token in environment variable\", function() {\r",
									"    var response = pm.response.json();\r",
									"    pm.environment.set(\"token\", response.token);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// add the request head needed from reqres here at collection level\r",
					"// to avoid adding it for each request\r",
					"pm.request.headers.add({\r",
					"    key: 'x-api-key',\r",
					"    value: pm.environment.get(\"api_key\")\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}